# Random Network grap by Harrysu
# experiments time = 10
# converging time < 1000
# Three valued Martix = np.array([[0, 0, 0.5], [0, 0.5, 1], [0.5, 1, 1]])
import networkx as ne
import matplotlib.pyplot as mp
import random
from random import choice
import numpy as np
import pandas as pd
#erdos renyi graphy
e = 0.1                                        #To control Evidence possible
L = []
u = []                                  # number convering time of experiments
Q = []
q = []
v = []
c = []
while e <= 1:
    for t in range(1,501):                    # number of experiments is 10
        def result(i,Belief_Array):
            #print ("Update",i,"times:", Belief_Array)
            ans=count(Belief_Array)
            converge=0
            belief_0.append(ans[0])
            belief_neutral.append(ans[1])
            belief_1.append(ans[2])
            #print("Result:",belief_0,belief_neutral,belief_1)
            if ans[0] == x:
                converge=1
                print ("Update",i,"times:")
                u.append(i)
            elif ans[2] == x:
                converge=2
                print ("Update",i,"times:")
                u.append(i)
                #print ("Totally Update",i,"times:")
                #print("Average Update",i/10,"times:")
            else:
                converge=0
            return converge
        def count(Belief_Array):
            count1=0
            count2=0
            count3=0
            for i in range(0,len(Belief_Array)):
                if Belief_Array[i] == 0:
                    count1+=1
                if Belief_Array[i] == 0.5:
                    count2+=1
                if Belief_Array[i] == 1:
                    count3+=1
            return count1,count2,count3

        print ("No.", t,"experiment:")
        x = 200       # number of agents is 3~9
        y = e      # line possibility to connect other agents is 0.5~0.7
        rg = ne.erdos_renyi_graph(x,y)      # use possibility to random connect
        ps = ne.shell_layout(rg)
        #ne.draw(rg,ps,with_labels=False,node_size=100)
        #mp.show()
        p = []
        temp = 0
        Belief_Array = []
        Belief_Original_Array = []
        Belief_Evidence_Array = []
        Error_Array = []
        check = 0                           # make sure all the nodes have edge
        belief_0 = []
        belief_neutral = []
        belief_1 = []
        Error_Array = []
        Belief_Evidence_Array = []
        work_evidence = []
        evidence_possible = 0
        error_possible = 0
        for i in range(0,x):
            if rg.degree(i) == 0:
                #print ('degree of node', i,'is 0')
                adjacent = []
                #print ('adjacent nodes of node', i,'is', adjacent)
                p.append(adjacent)
                Belief_Array.append((random.randrange(0,3,1)) / 2)
                check = 1                   # invalid network
            else:
                #print ('degree of node', i,'is', rg.degree(i))
                adjacent = []
                for j in rg.neighbors(i):
                    adjacent.append(j)
                #print ('adjacent nodes of node', i,'is', adjacent)
                p.append(adjacent)
                temp += rg.degree(i)
                Belief_Array.append((random.randrange(0,3,1)) / 2)
        edge = int(temp/2)
        print ('\nnumber of edges:', edge, '\n')
        Belief_Original_Array = Belief_Array
        Martix = np.array([[0, 0, 0.5], [0, 0.5, 1], [0.5, 1, 1]])
        for work_evidence in range(0,x):
            Belief_Evidence_Array.append((random.randrange(0,1000,1)/1000))
        if check == 0:
            for r in range(1,10000):
                A = random.randrange(0,len(p),1)
                B = random.choice(p[A])
                #print("A:",A)
                #print("B:",B)
                a = Martix[int(2*Belief_Array[A]),int(2*Belief_Array[B])]
                Belief_Array[A]=a
                Belief_Array[B]=a
                converge=result(r,Belief_Array)
                if converge == 1:
                    print("Converge at 0\n")
                    break
                elif converge == 2:
                    print("Converge at 1\n")
                    break
                else:
                    pass
        else:
            print ('invalid network\n')
    e = e + 0.1
    Z = np.sum(u)
    print("Average of Converging Time :",Z/len(u))
    L.append(Z/len(u))
print(L)   # total coverging times by evidence possible
